[{"id":"44fc2b35-ffc0-4d41-bf59-2bad9ae3e550","question":"How does React Works?","answer":"React is a library that allows you to write JavaScript components. It uses a syntax similar to XML, and the markup of the components is a mix between HTML and XML. It uses a technology called the “Virtual DOM” to manage updates. Virtual DOM is just another way of saying a big object with all the components rendered on the page and their properties. Whenever one of them changes, React knows what to do. For event handling, React registers a global event handler (on the HTML or Body element) and whenever events come through that listener, it takes on the responsibility to propagate the proper events and trigger the right handlers within components further down the chain.","image":"https://s3.ap-southeast-1.amazonaws.com/arrowhitech.com/wp-content/uploads/2021/09/01031030/ReactJS.png"},
{"id":"e2b05e73-c653-40af-a5cc-d90b69bda5e6","question":"Difference between State and Props in ReactJs","answer":"React is an opensource JavaScript library that offers a visual overview of the JavaScript architecture for conventional MVC. React promises programmers a model in which substrates cannot directly influence enclosing components—data are downstream, data changes in HTML are efficiently modified, and the DOM is abstracted to boost performance using Virtual DOM. How can we access data from the previous component if the data is just being flowed from components to components? The answer is props. React uses data transmission props that we need to transfer to various components. The difference comes in which component the data are owned. State is owned locally and the component itself updates it. Props are owned and read-only by a parent. Props can be changed only if an upstream shift is caused by a callback function passed on to the child. A prop can be passed on to the child in the state of a parent. They apply to the same value but can only be updated by the parent variable.","image":"https://s3.ap-southeast-1.amazonaws.com/arrowhitech.com/wp-content/uploads/2020/07/07082528/off-feature-2-1024x576.jpg"},
{"id":"d61f31da-a412-43da-a448-c989f709422f","question":"What does Useeffect () hook do in react?","answer":"Using useEffect is probably the best part of React Hooks. It helps reduce the clutter of the component lifecycle methods and, most importantly, it helps separate different logic that can appear in the lifecycle methods. By default, useEffect always runs after the first render. The dependency array in useEffect lets you specify the conditions to trigger it. If you provide useEffect an empty dependency array, it'll run exactly once. We use useEffect() when our content need to be updated, for that cases we should use dependency in useEffect().","image":"https://daveceddia.com/images/useEffect-hook.png"},
{"id":"aa089f3a-859d-4aca-9921-aed5813eb36b","question":"What is the useState in React?","answer":"The useState() is a Hook that allows you to have state variables in functional components . so basically useState is the ability to encapsulate local state in a functional component. React has two types of components, one is class components which are ES6 classes that extend from React and the other is functional components. Class components a Component and can have state and lifecycle methods: class Message extends React. The  useState hook is a special function that takes the initial state as an argument and returns an array of two entries.  UseState encapsulate only singular value from the state, for multiple state need to have useState calls.","image":"https://blog.alexdevero.com/wp-content/uploads/2021/04/26-04-21-react-usestate-hook-in-action-blog.jpg"},
{"id":"dd591706-fd41-40c6-aa2c-51b18f9a5f24","question":"What is a React component?","answer":"A Component is considered as the core building blocks of a React application. It makes the task of building UIs much easier. Each component exists in the same space, but they work independently from one another and merge all in a parent component, which will be the final UI of your application. Every React component have their own structure, methods as well as APIs. They can be reusable as per your need. For better understanding, consider the entire UI as a tree. Here, the root is the starting component, and each of the other pieces becomes branches, which are further divided into sub-branches.","image":"https://blog.rapid7.com/content/images/k-img/thumb-render-outside-react.jpg"},
{"id":"33275091-789a-4c45-b25d-e74c5f1ee33a","question":"What is Props in React?","answer":"We all know that React Components allow you to split the application interfaces into reusable, independent segments. “Props” stands for properties. It is a special keyword in React which is used for passing data from one component to another. Logically, components are just like JavaScript functions. They accept random inputs (called “props”) and return React elements which tell what should be displayed on the screen. Props can be used to pass any kind of data such as: String, Array, Integer, Boolean, Objects or, Functions","image":"https://i.ytimg.com/vi/o9sMJo0f5Us/maxresdefault.jpg"}]